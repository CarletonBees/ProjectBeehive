//Honey Bee Project - 4th year Engineering Project - Adam Berg, 100978623
#include "DHT.h"
#include <avr/sleep.h>
#include <avr/power.h>
#include <SPI.h>
#include <SD.h>
#define DHTPIN 2     // 1st sensor is connected to digital pin 2, this will be the inside the hive sensor
#define DHTPIN2 7   // 2nd sensor is connected to the digital pin 7, this will be the outside the hive sensor
#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321

DHT dht(DHTPIN, DHTTYPE);  //initializing and instanciating the DHT sensors
DHT dht2(DHTPIN2, DHTTYPE);

volatile int f_timer = 0;
volatile int counter = 0;
Sd2Card card;
SdVolume volume;
SdFile root;
File TestFile;
const int chipSelect = 10;

ISR(TIMER1_OVF_vect) {
  if (f_timer == 0) {
    f_timer = 1;
  }
}

void enterSleep(void) {
  set_sleep_mode(SLEEP_MODE_IDLE);
  sleep_enable();
  power_adc_disable();
  power_spi_disable();
  power_timer0_disable();
  power_timer2_disable();
  power_twi_disable();
  sleep_mode();
  sleep_disable();
  power_all_enable();
}

void setup() {
  Serial.begin(9600);
  while (!Serial) {
  }
  Serial.print("\nInitializing SD card...");
  if (!card.init(SPI_HALF_SPEED, chipSelect)) {
    Serial.println("initialization failed.");
    return;
  }
  else {
    Serial.println("Wiring is correct and a card is present.");
  }
  Serial.print("\nCard type: ");
  switch (card.type()) {
    case SD_CARD_TYPE_SD1:
      Serial.println("SD1");
      break;
    case SD_CARD_TYPE_SD2:
      Serial.println("SD2");
      break;
    case SD_CARD_TYPE_SDHC:
      Serial.println("SDHC");
      break;
    default:
      Serial.println("Unknown");
  }

  // Now we will try to open the 'volume'/'partition' - it should be FAT16 or FAT32
  if (!volume.init(card)) {
    Serial.println("Could not find FAT16/FAT32 partition.\nMake sure you've formatted the card");
    return;
  }

  // print the type and size of the first FAT-type volume
  uint32_t volumesize;
  Serial.print("\nVolume type is FAT");
  Serial.println(volume.fatType(), DEC);
  Serial.println();

  volumesize = volume.blocksPerCluster();    // clusters are collections of blocks
  volumesize *= volume.clusterCount();       // we'll have a lot of clusters
  volumesize *= 512;                         // SD card blocks are always 512 bytes
  Serial.print("Volume size (bytes): ");
  Serial.println(volumesize);
  Serial.print("Volume size (Kbytes): ");
  volumesize /= 1024;
  Serial.println(volumesize);
  Serial.print("Volume size (Mbytes): ");
  volumesize /= 1024;
  Serial.println(volumesize);
  Serial.println("\nFiles found on the card (name, date and size in bytes): ");
  root.openRoot(volume);
  // list all files in the card with date and size
  root.ls(LS_R | LS_DATE | LS_SIZE);
  Serial.println("BEGIN READING!!!");
  dht.begin();


  pinMode(10, OUTPUT);
  if (!SD.begin(10)) {
    Serial.println("initialization failed!");
    return;
  }
  //pinMode(LED_PIN, OUTPUT);
  TCCR1A = 0x00;    //Normal Timer Operation
  TCNT1 = 0x2DC7;   //Pre-load register to reduce timeout period
  TCCR1B = 0x05;    //Prescaler for 1:1024
  TIMSK1 = 0x01;    //Enable the timer overflow interrupt
}


void loop() {
  if (f_timer == 1) {
    counter++;
    f_timer = 0;
    enterSleep();
  }
  if (f_timer == 1 && counter == 220) { //220 for setup 15 minutes 2 for 8 second test
    counter = 0;
    f_timer = 0;
    float h = dht.readHumidity();
    float t = dht.readTemperature();      // Read temperature as Celsius (the default)
    float f = dht.readTemperature(true);  // Read temperature as Fahrenheit (isFahrenheit = true)
    float h2 = dht2.readHumidity();
    float t2 = dht2.readTemperature();
    if (isnan(h) || isnan(t) || isnan(f)) {
      Serial.println("Failed to read from DHT sensor!");       // Check if any reads failed and exit early (to try again).
      return;
    }
    TestFile = SD.open("Hive10.txt", FILE_WRITE);
    if (TestFile) {
      TestFile.print("Sensor 1 (pin 2, inside): Humidity ");
      TestFile.print(h);
      TestFile.print(" Temperature ");
      TestFile.println(t);
      TestFile.print("Sensor 2 (pin 7, outside): Humidity ");
      TestFile.print(h2);
      TestFile.print(" Temperature ");
      TestFile.println(t2);
      TestFile.close();

      Serial.print("Sensor 1 (pin 2, inside): Humidity ");
      Serial.print(h);
      Serial.print(" Temperature ");
      Serial.println(t);
      Serial.print("Sensor 2 (pin 7, outside): Humidity ");
      Serial.print(h2);
      Serial.print(" Temperature ");
      Serial.println(t2);
    }
    else {
      Serial.println("error opening datalog.txt");
    }
    enterSleep();
  }
}




